[tool.poetry]
name = "01-template-base"
version = "0.1.0"
description = "Projeto com modelo de pasta para uso com Python"
repository = "https://github.com/vndmtrx/poetry-fastapi-container"
authors = ["Eduardo Rolim <vndmtrx@duck.com>"]
readme = "README.md"
packages = [{include = "template_base"}]

[tool.poetry.dependencies]
python = "^3.11"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-profiling = "^1.7.0"

[tool.poetry.group.dev.dependencies]
black = "^23.7.0"
taskipy = "^1.12.0"
pylint = {extras = ["spelling"], version = "^2.17.5"}

[tool.pytest.ini_options]
python_files = ["test*.py","*tests.py"]
testpaths = ["tests/unit"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.taskipy.tasks]
test = {cmd = "export PYTHONDONTWRITEBYTECODE=1; pytest -x -p no:cacheprovider", help = "Roda os testes e aborta se houver falha."}
profile = {cmd = "export PYTHONDONTWRITEBYTECODE=1; pytest --profile-svg -p no:cacheprovider", help = "Roda testes e entrega um relatório de cobertura do código."}
cov = {cmd = "export PYTHONDONTWRITEBYTECODE=1; pytest --cov=template_base -p no:cacheprovider", help = "Roda testes e entrega um relatório de cobertura do código."}

pre_style = {cmd = "export PYTHONDONTWRITEBYTECODE=1; black template_base tests --diff --color --safe", help = "Mostra erros de estilo."}
style = {cmd = "export PYTHONDONTWRITEBYTECODE=1; black template_base tests --color --safe", help = "Faz a formatação do código."}

linter = {cmd = "export PYTHONDONTWRITEBYTECODE=1; pylint --recursive=y template_base", help = "Linter do código por inconsistências."}
genpylintrc = {cmd = "export PYTHONDONTWRITEBYTECODE=1; pylint --generate-rcfile > .pylintrc", help = "Criação do arquivo de configuração do pylint."}

clean = {cmd = "find . -not -path './.venv/*' | grep -E '(\\.coverage$|\\.pytest_cache$|prof$|dist$|__pycache__|\\.py[co]$)' | xargs rm -rf", help = "Limpa o projeto de arquivos gerados automaticamente."}